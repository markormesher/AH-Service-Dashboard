// Generated by CoffeeScript 1.9.3
(function() {
  var addToTicker, clockCycle, feedbackCycle, feedbackRunning, getBackgroundDiv, getCenterDiv, getGuid, getMonthName, getNote, getOrdinal, getTickerWidths, guidCount, initNotes, loadFeedbackText, loadNote, loadTickerText, loadTweetText, load_clock, load_dial, load_feedback, load_identify, load_leader_board, load_ticker, load_tweets, notes, readCleanLines, reloadDataIframe, setNoteTitle, tickerLeft, tickerMove, tickerRunning, tickerSeparator, tickerWidth, tickerWrapperWidth, tweetCycle, tweetsRunning;

  window._DATA = {};

  window._SOURCES = {};

  window.onmessage = function(e) {
    var i, name, ref, ref1, results, waiting;
    if ((e != null ? (ref = e.data) != null ? ref.sender : void 0 : void 0) !== 'self') {
      return;
    }
    window._DATA[e.data.source] = e.data.data;
    ref1 = window._SOURCES;
    results = [];
    for (name in ref1) {
      waiting = ref1[name];
      if (e.data.source === name) {
        results.push((function() {
          var j, len, results1;
          results1 = [];
          for (j = 0, len = waiting.length; j < len; j++) {
            i = waiting[j];
            results1.push(initNotes(i));
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  reloadDataIframe = function() {
    $('#js-iframe').attr('src', 'js.html');
    return setTimeout(reloadDataIframe, 5000);
  };

  setTimeout(reloadDataIframe, 1000);

  guidCount = 1;

  getGuid = function() {
    return guidCount++;
  };

  window.sourceLoaded = function(s) {
    var j, len, n, results, waiting;
    waiting = window._SOURCES[s];
    if ($.isArray(waiting)) {
      results = [];
      for (j = 0, len = waiting.length; j < len; j++) {
        n = waiting[j];
        results.push(initNotes(n));
      }
      return results;
    }
  };

  readCleanLines = function(source) {
    var r, raw;
    raw = window._DATA[source].split("\n");
    return (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = raw.length; j < len; j++) {
        r = raw[j];
        if (r.trim().length > 0 && r.substr(0, 2) !== '--') {
          results.push(r.trim());
        }
      }
      return results;
    })();
  };

  getNote = function(i) {
    return $('div#note-' + i);
  };

  getBackgroundDiv = function(note) {
    note.html('<div class="note-extra-bg"></div>');
    return note.find('.note-extra-bg');
  };

  getCenterDiv = function(note, full) {
    if (full == null) {
      full = true;
    }
    note.addClass('note-center-outer' + (full ? '-full' : ''));
    note.html(note.html() + '<div class="note-center-inner"></div>');
    return note.find('.note-center-inner');
  };

  setNoteTitle = function(note, title) {
    return note.html(note.html() + '<p class="note-title">' + title + '</p>');
  };

  getOrdinal = function(n) {
    var m, ordinals;
    ordinals = [false, 'st', 'nd', 'rd'];
    m = n % 100;
    if (m > 10 && m < 14) {
      return 'th';
    } else {
      return ordinals[m % 10] || 'th';
    }
  };

  notes = [
    {
      id: 0,
      job: 'ticker',
      data: 'news-ticker'
    }, {
      id: 1,
      job: 'clock',
      data: null
    }, {
      id: 2,
      job: 'feedback',
      data: 'feedback'
    }, {
      id: 3,
      job: 'tweets',
      data: 'tweets'
    }, {
      id: 4,
      job: 'dial',
      data: 'dial-1'
    }, {
      id: 5,
      job: 'dial',
      data: 'dial-2'
    }, {
      id: 6,
      job: 'leader-board',
      data: 'leader-board-1'
    }, {
      id: 7,
      job: 'identify',
      data: null
    }, {
      id: 8,
      job: 'leader-board',
      data: 'leader-board-2'
    }, {
      id: 9,
      job: 'identify',
      data: null
    }, {
      id: 10,
      job: 'identify',
      data: null
    }, {
      id: 11,
      job: 'identify',
      data: null
    }
  ];

  $(document).ready(function() {
    return initNotes();
  });

  initNotes = function(n) {
    var data, i, ref, ref1, results;
    if (n == null) {
      n = -1;
    }
    if (n >= 0) {
      loadNote(notes[n].id, notes[n].job, (ref = notes[n]) != null ? ref.data : void 0);
      return;
    }
    i = 0;
    results = [];
    while (true) {
      data = (ref1 = notes[i]) != null ? ref1.data : void 0;
      if (data === null) {
        loadNote(notes[i].id, notes[i].job, null);
      } else {
        if ($.isArray(window._SOURCES[data])) {
          window._SOURCES[data][window._SOURCES[data].length] = i;
        } else {
          window._SOURCES[data] = [i];
        }
      }
      ++i;
      if (i === notes.length) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  loadNote = function(id, role, data) {
    switch (role) {
      case 'clock':
        return load_clock(id);
      case 'dial':
        return load_dial(id, data);
      case 'feedback':
        return load_feedback(id);
      case 'leader-board':
        return load_leader_board(id, data);
      case 'identify':
        return load_identify(id);
      case 'ticker':
        return load_ticker();
      case 'tweets':
        return load_tweets(id);
    }
  };

  load_identify = function(id) {
    var center, note;
    note = getNote(id);
    center = getCenterDiv(note);
    return center.html(id);
  };

  load_clock = function(id) {
    var bg, center, note;
    note = getNote(id);
    bg = getBackgroundDiv(note);
    bg.css('background-image', 'url("images/clock-bg.png")');
    bg.css('background-size', 'auto 85%');
    center = getCenterDiv(bg);
    center.html('<p class="clock-time"</p><p class="clock-date"></p>');
    return clockCycle();
  };

  clockCycle = function() {
    var d, date, h, m, now, time;
    now = new Date();
    h = now.getHours();
    m = now.getMinutes();
    if (h < 10) {
      h = '0' + h;
    }
    if (m < 10) {
      m = '0' + m;
    }
    time = h + ':' + m;
    d = now.getDate();
    m = now.getMonth();
    date = d + getOrdinal(d) + " " + getMonthName(m);
    $('.clock-time').html(time);
    $('.clock-date').html(date);
    return setTimeout(clockCycle, 500);
  };

  getMonthName = function(n) {
    var months;
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    return months[n];
  };

  load_dial = function(id, data) {
    var center, knobGuid, note, values;
    values = readCleanLines(data);
    note = getNote(id);
    note.html('');
    center = getCenterDiv(note, false);
    setNoteTitle(center, values[0]);
    knobGuid = getGuid();
    center.html(center.html() + '<input type="text" id="knob-' + knobGuid + '">');
    return $('#knob-' + knobGuid).val(values[3]).knob({
      width: 110,
      angleArc: 250,
      angleOffset: -125,
      fgColor: '#ffffff',
      bgColor: 'rgba(255, 255, 255, 0.3)',
      readOnly: true,
      displayPrevious: true,
      min: values[1],
      max: values[2]
    });
  };

  tickerWidth = tickerWrapperWidth = tickerLeft = 0;

  tickerSeparator = '<span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;</span>';

  tickerRunning = false;

  load_ticker = function() {
    if (tickerRunning) {
      return;
    }
    tickerRunning = true;
    loadTickerText();
    getTickerWidths();
    return tickerMove();
  };

  getTickerWidths = function() {
    tickerWidth = $('.ticker-text').width();
    return tickerWrapperWidth = $('.ticker').width();
  };

  loadTickerText = function() {
    var i, j, len, lines, r, results;
    $('.ticker-text').html('');
    lines = readCleanLines('news-ticker');
    results = [];
    for (i = j = 0, len = lines.length; j < len; i = ++j) {
      r = lines[i];
      results.push(addToTicker(r, i));
    }
    return results;
  };

  addToTicker = function(r, i) {
    var tickerText;
    tickerText = $('.ticker-text');
    if (i > 0) {
      tickerText.html(tickerText.html() + tickerSeparator);
    }
    return tickerText.html(tickerText.html() + r);
  };

  tickerMove = function() {
    if (--tickerLeft < -tickerWidth) {
      loadTickerText();
      getTickerWidths();
      tickerLeft = tickerWrapperWidth;
    }
    $('.ticker-text').css('margin-left', tickerLeft + 'px');
    return setTimeout(tickerMove, 16);
  };

  tweetsRunning = false;

  load_tweets = function(id) {
    var bg, center, note;
    loadTweetText();
    if (tweetsRunning) {
      return;
    }
    tweetsRunning = true;
    note = getNote(id);
    bg = getBackgroundDiv(note);
    bg.css('background-image', 'url("images/twitter-bg.png")');
    bg.css('background-size', 'auto 85%');
    center = getCenterDiv(bg);
    center.html('<p class="tweet-content"></p><p class="tweet-name"></p>');
    window._DATA['current-tweet'] = 0;
    return tweetCycle();
  };

  tweetCycle = function() {
    ++window._DATA['current-tweet'];
    if (window._DATA['current-tweet'] >= window._DATA['tweet-text'].length) {
      window._DATA['current-tweet'] = 0;
    }
    $('.tweet-name').html(window._DATA['tweet-text'][window._DATA['current-tweet']][0]);
    $('.tweet-content').html("&quot;" + window._DATA['tweet-text'][window._DATA['current-tweet']][1] + "&quot;");
    return setTimeout(tweetCycle, 15000);
  };

  loadTweetText = function() {
    var i, lines, results;
    lines = readCleanLines('tweets');
    window._DATA['tweet-text'] = [];
    i = 0;
    results = [];
    while (true) {
      window._DATA['tweet-text'][window._DATA['tweet-text'].length] = [lines[i], lines[i + 1]];
      i += 2;
      if (i >= lines.length) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  feedbackRunning = false;

  load_feedback = function(id) {
    var bg, center, note;
    loadFeedbackText();
    if (feedbackRunning) {
      return;
    }
    feedbackRunning = true;
    note = getNote(id);
    bg = getBackgroundDiv(note);
    bg.css('background-image', 'url("images/feedback-bg.png")');
    bg.css('background-size', 'auto 85%');
    center = getCenterDiv(bg);
    center.html('<p class="feedback-agent"></p><p class="feedback-content"></p><p class="feedback-name"></p>');
    window._DATA['current-feedback'] = 0;
    return feedbackCycle();
  };

  feedbackCycle = function() {
    ++window._DATA['current-feedback'];
    if (window._DATA['current-feedback'] >= window._DATA['feedback-text'].length) {
      window._DATA['current-feedback'] = 0;
    }
    if (window._DATA['feedback-text'][window._DATA['current-feedback']][0] === '#') {
      $('.feedback-agent').hide();
    } else {
      $('.feedback-agent').show();
    }
    $('.feedback-agent').html(window._DATA['feedback-text'][window._DATA['current-feedback']][0]);
    $('.feedback-content').html("&quot;" + window._DATA['feedback-text'][window._DATA['current-feedback']][1] + "&quot;");
    $('.feedback-name').html(window._DATA['feedback-text'][window._DATA['current-feedback']][2]);
    return setTimeout(feedbackCycle, 15000);
  };

  loadFeedbackText = function() {
    var i, lines, results;
    lines = readCleanLines('feedback');
    window._DATA['feedback-text'] = [];
    i = 0;
    results = [];
    while (true) {
      window._DATA['feedback-text'][window._DATA['feedback-text'].length] = [lines[i], lines[i + 1], lines[i + 2]];
      i += 3;
      if (i >= lines.length) {
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  load_leader_board = function(id, data) {
    var bg, i, note, output, values;
    values = readCleanLines(data);
    note = getNote(id);
    bg = getBackgroundDiv(note);
    bg.css('background-image', 'url("images/leader-board-bg.png")');
    bg.css('background-size', 'auto 85%');
    bg.html('');
    setNoteTitle(bg, values[0]);
    i = 1;
    output = '';
    while (true) {
      output += '<p class="leader-board-entry"><span>' + i + '<sup>' + getOrdinal(i) + '</sup></span> ' + values[i] + '</p>';
      ++i;
      if (i >= values.length) {
        break;
      }
    }
    return bg.html(bg.html() + output);
  };

}).call(this);

//# sourceMappingURL=tasks.js.map
