// Generated by CoffeeScript 1.9.3
(function() {
  var addToTicker, clockCycle, getBackgroundDiv, getCenterDiv, getDateOrd, getGuid, getMonthName, getNote, guidCount, initNotes, initTicker, loadNote, loadTickerText, load_clock, load_dial, load_identify, notes, readCleanLines, setNoteTitle, tickerLeft, tickerMove, tickerSeparator, tickerWidth, tickerWrapperWidth;

  guidCount = 1;

  getGuid = function() {
    return ++guidCount;
  };

  readCleanLines = function(source) {
    var r, raw;
    raw = source.split("\n");
    return (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = raw.length; j < len; j++) {
        r = raw[j];
        if (r.trim().length > 0 && r.substr(0, 2) !== '--') {
          results.push(r.trim());
        }
      }
      return results;
    })();
  };

  notes = [
    {
      id: 1,
      job: 'clock'
    }, {
      id: 2,
      job: 'identify'
    }, {
      id: 3,
      job: 'identify'
    }, {
      id: 4,
      job: 'dial',
      data: {
        source: dialOneContent
      }
    }, {
      id: 5,
      job: 'dial',
      data: {
        source: dialTwoContent
      }
    }, {
      id: 6,
      job: 'identify'
    }, {
      id: 7,
      job: 'identify'
    }, {
      id: 8,
      job: 'identify'
    }, {
      id: 9,
      job: 'identify'
    }, {
      id: 10,
      job: 'identify'
    }, {
      id: 11,
      job: 'identify'
    }
  ];

  getNote = function(i) {
    return $('div#note-' + i);
  };

  getBackgroundDiv = function(note) {
    note.html('<div class="note-extra-bg"></div>');
    return note.find('.note-extra-bg');
  };

  getCenterDiv = function(note, full) {
    if (full == null) {
      full = true;
    }
    note.addClass('note-center-outer' + (full ? '-full' : ''));
    note.html(note.html() + '<div class="note-center-inner"></div>');
    return note.find('.note-center-inner');
  };

  setNoteTitle = function(note, title) {
    return note.html(note.html() + '<p class="note-title">' + title + '</p>');
  };

  $(document).ready(function() {
    initNotes();
    return initTicker();
  });

  initNotes = function() {
    var j, len, n, results;
    results = [];
    for (j = 0, len = notes.length; j < len; j++) {
      n = notes[j];
      results.push(loadNote(n.id, n.job, n != null ? n.data : void 0));
    }
    return results;
  };

  loadNote = function(id, role, data) {
    switch (role) {
      case 'identify':
        return load_identify(id);
      case 'clock':
        return load_clock(id, data);
      case 'dial':
        return load_dial(id, data);
    }
  };

  load_identify = function(id) {
    var center, note;
    note = getNote(id);
    center = getCenterDiv(note);
    return center.html(id);
  };

  load_clock = function(id, data) {
    var bg, center, note;
    note = getNote(id);
    bg = getBackgroundDiv(note);
    bg.css('background-image', 'url("images/clock-bg.png")');
    bg.css('background-size', 'auto 85%');
    center = getCenterDiv(bg);
    center.html('<p class="clock-time"</p><p class="clock-date"></p>');
    return clockCycle();
  };

  clockCycle = function() {
    var d, date, h, m, now, time;
    now = new Date();
    h = now.getHours();
    m = now.getMinutes();
    if (h < 10) {
      h = '0' + h;
    }
    if (m < 10) {
      m = '0' + m;
    }
    time = h + ':' + m;
    d = now.getDate();
    m = now.getMonth();
    date = d + getDateOrd(d) + " " + getMonthName(m);
    $('.clock-time').html(time);
    $('.clock-date').html(date);
    return setTimeout(clockCycle, 500);
  };

  getDateOrd = function(n) {
    var m, ordinals;
    ordinals = [false, 'st', 'nd', 'rd'];
    m = n % 100;
    if (m > 10 && m < 14) {
      return 'th';
    } else {
      return ordinals[m % 10] || 'th';
    }
  };

  getMonthName = function(n) {
    var months;
    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    return months[n];
  };

  load_dial = function(id, data) {
    var center, knobGuid, note, values;
    values = readCleanLines(data.source);
    note = getNote(id);
    center = getCenterDiv(note, false);
    setNoteTitle(center, values[0]);
    knobGuid = getGuid();
    center.html(center.html() + '<input type="text" id="knob-' + knobGuid + '">');
    return $('#knob-' + knobGuid).val(values[3]).knob({
      width: 110,
      angleArc: 250,
      angleOffset: -125,
      fgColor: '#ffffff',
      bgColor: 'rgba(255, 255, 255, 0.3)',
      readOnly: true,
      displayPrevious: true,
      min: values[1],
      max: values[2]
    });
  };

  tickerWidth = tickerWrapperWidth = tickerLeft = 0;

  tickerSeparator = '<span>&nbsp;&nbsp;&bull;&nbsp;&nbsp;</span>';

  initTicker = function() {
    loadTickerText();
    tickerWidth = $('.ticker-text').width();
    tickerWrapperWidth = $('.ticker').width();
    return tickerMove();
  };

  loadTickerText = function() {
    var i, j, len, lines, r, results;
    lines = readCleanLines(newsTickerContent);
    results = [];
    for (i = j = 0, len = lines.length; j < len; i = ++j) {
      r = lines[i];
      results.push(addToTicker(r, i));
    }
    return results;
  };

  addToTicker = function(r, i) {
    var tickerText;
    tickerText = $('.ticker-text');
    if (i > 0) {
      tickerText.html(tickerText.html() + tickerSeparator);
    }
    return tickerText.html(tickerText.html() + r);
  };

  tickerMove = function() {
    if (--tickerLeft < -tickerWidth) {
      tickerLeft = tickerWrapperWidth;
    }
    $('.ticker-text').css('margin-left', tickerLeft + 'px');
    return setTimeout(tickerMove, 16);
  };

}).call(this);

//# sourceMappingURL=tasks.js.map
